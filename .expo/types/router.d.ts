/* eslint-disable */
import * as Router from 'expo-router';

export * from 'expo-router';

declare module 'expo-router' {
  export namespace ExpoRouter {
    export interface __routes<T extends string | object = string> {
      hrefInputParams: { pathname: Router.RelativePathString, params?: Router.UnknownInputParams } | { pathname: Router.ExternalPathString, params?: Router.UnknownInputParams } | { pathname: `/new-alarm`; params?: Router.UnknownInputParams; } | { pathname: `/_sitemap`; params?: Router.UnknownInputParams; } | { pathname: `${'/(tabs)'}/alarms` | `/alarms`; params?: Router.UnknownInputParams; } | { pathname: `${'/(tabs)'}/focus` | `/focus`; params?: Router.UnknownInputParams; } | { pathname: `${'/(tabs)'}` | `/`; params?: Router.UnknownInputParams; } | { pathname: `/components/FocusTimer`; params?: Router.UnknownInputParams; } | { pathname: `/components/SidebarLayout`; params?: Router.UnknownInputParams; } | { pathname: `/components/ThemeDemo`; params?: Router.UnknownInputParams; } | { pathname: `/context/AlarmsContext`; params?: Router.UnknownInputParams; } | { pathname: `/context/FocusTimerContext`; params?: Router.UnknownInputParams; } | { pathname: `/context/ThemeContext`; params?: Router.UnknownInputParams; } | { pathname: `/lib/notifications`; params?: Router.UnknownInputParams; } | { pathname: `/lib/sound`; params?: Router.UnknownInputParams; } | { pathname: `/lib/storage`; params?: Router.UnknownInputParams; } | { pathname: `/lib/styleUtils`; params?: Router.UnknownInputParams; } | { pathname: `/lib/taskManager`; params?: Router.UnknownInputParams; } | { pathname: `/theme/colors`; params?: Router.UnknownInputParams; } | { pathname: `/hooks/useThemedStyles`; params?: Router.UnknownInputParams; } | { pathname: `/+not-found`, params: Router.UnknownInputParams & {  } };
      hrefOutputParams: { pathname: Router.RelativePathString, params?: Router.UnknownOutputParams } | { pathname: Router.ExternalPathString, params?: Router.UnknownOutputParams } | { pathname: `/new-alarm`; params?: Router.UnknownOutputParams; } | { pathname: `/_sitemap`; params?: Router.UnknownOutputParams; } | { pathname: `${'/(tabs)'}/alarms` | `/alarms`; params?: Router.UnknownOutputParams; } | { pathname: `${'/(tabs)'}/focus` | `/focus`; params?: Router.UnknownOutputParams; } | { pathname: `${'/(tabs)'}` | `/`; params?: Router.UnknownOutputParams; } | { pathname: `/components/FocusTimer`; params?: Router.UnknownOutputParams; } | { pathname: `/components/SidebarLayout`; params?: Router.UnknownOutputParams; } | { pathname: `/components/ThemeDemo`; params?: Router.UnknownOutputParams; } | { pathname: `/context/AlarmsContext`; params?: Router.UnknownOutputParams; } | { pathname: `/context/FocusTimerContext`; params?: Router.UnknownOutputParams; } | { pathname: `/context/ThemeContext`; params?: Router.UnknownOutputParams; } | { pathname: `/lib/notifications`; params?: Router.UnknownOutputParams; } | { pathname: `/lib/sound`; params?: Router.UnknownOutputParams; } | { pathname: `/lib/storage`; params?: Router.UnknownOutputParams; } | { pathname: `/lib/styleUtils`; params?: Router.UnknownOutputParams; } | { pathname: `/lib/taskManager`; params?: Router.UnknownOutputParams; } | { pathname: `/theme/colors`; params?: Router.UnknownOutputParams; } | { pathname: `/hooks/useThemedStyles`; params?: Router.UnknownOutputParams; } | { pathname: `/+not-found`, params: Router.UnknownOutputParams & {  } };
      href: Router.RelativePathString | Router.ExternalPathString | `/new-alarm${`?${string}` | `#${string}` | ''}` | `/_sitemap${`?${string}` | `#${string}` | ''}` | `${'/(tabs)'}/alarms${`?${string}` | `#${string}` | ''}` | `/alarms${`?${string}` | `#${string}` | ''}` | `${'/(tabs)'}/focus${`?${string}` | `#${string}` | ''}` | `/focus${`?${string}` | `#${string}` | ''}` | `${'/(tabs)'}${`?${string}` | `#${string}` | ''}` | `/${`?${string}` | `#${string}` | ''}` | `/components/FocusTimer${`?${string}` | `#${string}` | ''}` | `/components/SidebarLayout${`?${string}` | `#${string}` | ''}` | `/components/ThemeDemo${`?${string}` | `#${string}` | ''}` | `/context/AlarmsContext${`?${string}` | `#${string}` | ''}` | `/context/FocusTimerContext${`?${string}` | `#${string}` | ''}` | `/context/ThemeContext${`?${string}` | `#${string}` | ''}` | `/lib/notifications${`?${string}` | `#${string}` | ''}` | `/lib/sound${`?${string}` | `#${string}` | ''}` | `/lib/storage${`?${string}` | `#${string}` | ''}` | `/lib/styleUtils${`?${string}` | `#${string}` | ''}` | `/lib/taskManager${`?${string}` | `#${string}` | ''}` | `/theme/colors${`?${string}` | `#${string}` | ''}` | `/hooks/useThemedStyles${`?${string}` | `#${string}` | ''}` | { pathname: Router.RelativePathString, params?: Router.UnknownInputParams } | { pathname: Router.ExternalPathString, params?: Router.UnknownInputParams } | { pathname: `/new-alarm`; params?: Router.UnknownInputParams; } | { pathname: `/_sitemap`; params?: Router.UnknownInputParams; } | { pathname: `${'/(tabs)'}/alarms` | `/alarms`; params?: Router.UnknownInputParams; } | { pathname: `${'/(tabs)'}/focus` | `/focus`; params?: Router.UnknownInputParams; } | { pathname: `${'/(tabs)'}` | `/`; params?: Router.UnknownInputParams; } | { pathname: `/components/FocusTimer`; params?: Router.UnknownInputParams; } | { pathname: `/components/SidebarLayout`; params?: Router.UnknownInputParams; } | { pathname: `/components/ThemeDemo`; params?: Router.UnknownInputParams; } | { pathname: `/context/AlarmsContext`; params?: Router.UnknownInputParams; } | { pathname: `/context/FocusTimerContext`; params?: Router.UnknownInputParams; } | { pathname: `/context/ThemeContext`; params?: Router.UnknownInputParams; } | { pathname: `/lib/notifications`; params?: Router.UnknownInputParams; } | { pathname: `/lib/sound`; params?: Router.UnknownInputParams; } | { pathname: `/lib/storage`; params?: Router.UnknownInputParams; } | { pathname: `/lib/styleUtils`; params?: Router.UnknownInputParams; } | { pathname: `/lib/taskManager`; params?: Router.UnknownInputParams; } | { pathname: `/theme/colors`; params?: Router.UnknownInputParams; } | { pathname: `/hooks/useThemedStyles`; params?: Router.UnknownInputParams; } | `/+not-found` | { pathname: `/+not-found`, params: Router.UnknownInputParams & {  } };
    }
  }
}
